mixin step2(timeSlots, reservation)
  .reservation-container#reservationForm
    .step.active#step2.content-box.text-center.p-4
      h1 Edit Laboratory Reservation
      .selection-info
        strong Selected Laboratory:
        span#selected-lab-edit= reservation.lab
      .selection-info.mt-2
        strong Reservation ID:
        span#editable-id= reservation._id
      .selection-info.mt-2
        strong Current Start Time:
        span#current-start-time= reservation.resDate.start.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })
      .selection-info.mt-2
        strong Current End Time:
        span#current-end-time= reservation.resDate.end.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })

      .date-header#date-header
        span#formatted-date
      .date-input-container
        label(for="date_select_edit")
        input#date_select_edit.form-control.w-auto(type="date" name="resDate" required onchange="updateDateHeaderEdit(); checkSubmitButtonEdit();")
      .d-flex.justify-content-center
        .step2-container
          .step2-content
            table.time-table#time-table
              thead
                tr
                  th Seat
                  each timeSlot in timeSlots
                    th= timeSlot
              tbody#table-body
      .mt-3
        button.btn.btn-back(type="button" onclick="prevStepEdit()") Back
        button#submit-btn-edit.btn.submit(type="button" onclick="submitFormEdit()") Submit

mixin scriptBlock(reservation)
  script.
    // Initialize with reservation data
    const reservationData = !{JSON.stringify(reservation)};
    let selectedCellsEdit = {};
    let currentActiveRowEdit = null;
    let originalReservation = reservationData;
    let editableReservationId = reservationData._id;
    
    // Tooltip functions (copied from _reservation_form.pug)
    function showReservationTooltipEdit(e) {
      let info = {};
      try {
        info = JSON.parse(e.currentTarget.dataset.reservationInfo);
      } catch {}
      let tooltip = document.getElementById('reservation-tooltip');
      if (!tooltip) {
        tooltip = document.createElement('div');
        tooltip.id = 'reservation-tooltip';
        tooltip.style.position = 'fixed';
        tooltip.style.zIndex = 9999;
        tooltip.style.pointerEvents = 'none';
        tooltip.style.background = '#FAEECF';
        tooltip.style.border = '1px solid #11414E';
        tooltip.style.color = '#11414E';
        tooltip.style.padding = '10px 16px';
        tooltip.style.borderRadius = '8px';
        tooltip.style.boxShadow = '0 2px 8px rgba(0,0,0,0.12)';
        tooltip.style.fontSize = '15px';
        document.body.appendChild(tooltip);
      }
      let userFullName = 'N/A';
      if (info.anon) {
        userFullName = 'Anonymous';
      } else if (info.user && typeof info.user === 'object') {
        userFullName = info.user.firstName + ' ' + info.user.lastName;
      }
      tooltip.innerHTML =
        `<strong>Seat:</strong> ${info.seat || ''}<br>` +
        `<strong>Lab:</strong> ${info.lab || ''}<br>` +
        `<strong>Request Date:</strong> ${info.reqDate ? new Date(info.reqDate).toLocaleString() : ''}<br>` +
        `<strong>Reservation:</strong> ${info.resStart ? new Date(info.resStart).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : ''} - ${info.resEnd ? new Date(info.resEnd).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : ''}<br>` +
        `<strong>User:</strong> ${userFullName}<br>` +
        (info.reservedStud ? `<strong>Students:</strong> ${info.reservedStud}<br>` : '');
      // Position tooltip near mouse
      function moveTooltip(ev) {
        tooltip.style.left = (ev.clientX + 16) + 'px';
        tooltip.style.top = (ev.clientY + 16) + 'px';
      }
      moveTooltip(e);
      document.addEventListener('mousemove', moveTooltip);
      e.currentTarget._moveTooltip = moveTooltip;
    }
    function hideReservationTooltipEdit(e) {
      const tooltip = document.getElementById('reservation-tooltip');
      if (tooltip) tooltip.remove();
      if (e.currentTarget._moveTooltip) {
        document.removeEventListener('mousemove', e.currentTarget._moveTooltip);
        delete e.currentTarget._moveTooltip;
      }
    }
    function formatDateEdit(dateString) {
      const date = new Date(dateString);
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const months = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];

      const dayOfWeek = days[date.getDay()];
      const month = months[date.getMonth()];
      const day = date.getDate();
      const year = date.getFullYear();

      return `${dayOfWeek}, ${month} ${day}, ${year}`;
    }

    function updateDateHeaderEdit() {
      const dateSelect = document.getElementById('date_select_edit');
      const dateHeader = document.getElementById('date-header');
      const formattedDateSpan = document.getElementById('formatted-date');

      if (dateSelect.value) {
        const formattedDate = formatDateEdit(dateSelect.value);
        formattedDateSpan.textContent = formattedDate;
        dateHeader.classList.add('visible');
        markReservationsEdit();
      } else {
        dateHeader.classList.remove('visible');
      }
    }

    function checkSubmitButtonEdit() {
      const submitBtn = document.getElementById('submit-btn-edit');
      const dateSelect = document.getElementById('date_select_edit');
      submitBtn.disabled = !(dateSelect.value && Object.keys(selectedCellsEdit).length > 0);
    }

    function createTableRowsEdit() {
      const tableBody = document.getElementById('table-body');
      tableBody.innerHTML = '';

      for (let i = 1; i <= 8; i++) {
        const row = document.createElement('tr');
        const rowLabel = document.createElement('td');
        rowLabel.textContent = `A${i}`;
        row.appendChild(rowLabel);

        for (let j = 1; j <= 29; j++) {
          const cell = document.createElement('td');
          cell.dataset.row = i;
          cell.dataset.col = j;
          cell.dataset.seat = `A${i}`;
          cell.addEventListener('click', function() { selectCellEdit(this); });
          cell.addEventListener("contextmenu", (event) => {
            event.preventDefault();
            deselectCellEdit(event.currentTarget);
          });
          row.appendChild(cell);
        }
        tableBody.appendChild(row);
      }
    }

    function clearAllSelectionsEdit() {
      const allSelectedCells = document.querySelectorAll('.selected');
      allSelectedCells.forEach(cell => {
        cell.classList.remove('selected');
      });
      selectedCellsEdit = {};
      currentActiveRowEdit = null;
    }

    function selectCellEdit(clickedCell) {
      const row = parseInt(clickedCell.dataset.row);
      const col = parseInt(clickedCell.dataset.col);
      const seat = clickedCell.dataset.seat;

      if (currentActiveRowEdit !== null && currentActiveRowEdit !== row) {
        clearAllSelectionsEdit();
      }

      currentActiveRowEdit = row;
      const isAlreadySelected = clickedCell.classList.contains('selected');
      const isReserved = clickedCell.classList.contains('reserved');
      const isEditable = clickedCell.classList.contains('editable');

      // Allow selection of editable cells (current reservation) or unreserved cells
      if (isReserved && !isEditable) {
        return;
      }

      if (isAlreadySelected) {
        const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
        let foundClickedCell = false;

        rowCells.forEach(cell => {
          const cellCol = parseInt(cell.dataset.col);
          if (cellCol === col) {
            foundClickedCell = true;
          }
          if (foundClickedCell) {
            cell.classList.remove('selected');
            delete selectedCellsEdit[cellCol];
          }
        });
      } else {
        const currentSelectedCols = Object.keys(selectedCellsEdit).map(key => parseInt(key)).sort((a, b) => a - b);

        if (currentSelectedCols.length === 0) {
          clickedCell.classList.add('selected');
          selectedCellsEdit[col] = {
            seat: seat,
            timeSlot: col
          };
        } else {
          const minCol = Math.min(...currentSelectedCols, col);
          const maxCol = Math.max(...currentSelectedCols, col);

          // Check if there are any non-editable reserved cells in the range
          let hasNonEditableReservedInRange = false;
          for (let i = minCol; i <= maxCol; i++) {
            const cellToCheck = document.querySelector(`td[data-row="${row}"][data-col="${i}"]`);
            if (cellToCheck && cellToCheck.classList.contains('reserved') && !cellToCheck.classList.contains('editable')) {
              hasNonEditableReservedInRange = true;
              break;
            }
          }

          if (hasNonEditableReservedInRange) {
            console.log('Cannot select range: non-editable reserved cells detected in the range');
            return;
          }

          // Clear current selections and select the new range
          const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
          rowCells.forEach(cell => {
            cell.classList.remove('selected');
          });
          selectedCellsEdit = {};

          // Select the new range
          for (let i = minCol; i <= maxCol; i++) {
            const cellToSelect = document.querySelector(`td[data-row="${row}"][data-col="${i}"]`);
            if (cellToSelect) {
              cellToSelect.classList.add('selected');
              selectedCellsEdit[i] = {
                seat: seat,
                timeSlot: i
              };
            }
          }
        }
      }
      checkSubmitButtonEdit();
    }

    function deselectCellEdit(clickedCell) {
      const row = parseInt(clickedCell.dataset.row);
      const col = parseInt(clickedCell.dataset.col);

      if (currentActiveRowEdit !== row) {
        return;
      }

      const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
      const isSelected = clickedCell.classList.contains('selected');
      if (isSelected) {
        let foundClickedCell = false;

        rowCells.forEach(cell => {
          const cellCol = parseInt(cell.dataset.col);
          if (cellCol === col) {
            foundClickedCell = true;
          }
          if (foundClickedCell) {
            cell.classList.remove('selected');
            delete selectedCellsEdit[cellCol];
          }
        });

        if (Object.keys(selectedCellsEdit).length === 0) {
          currentActiveRowEdit = null;
        }
      }

      checkSubmitButtonEdit();
    }

    function prevStepEdit() {
      // Navigate back to admin panel or previous page
      window.history.back();
    }
    
    function submitFormEdit() {
      const dateSelect = document.getElementById('date_select_edit');
      const selectedLab = document.getElementById('selected-lab-edit').textContent;

      const timeSlots = ['07:00','07:30','08:00','08:30','09:00','09:30','10:00','10:30','11:00','11:30','12:00','12:30','13:00','13:30','14:00','14:30','15:00','15:30','16:00','16:30','17:00','17:30','18:00','18:30','19:00','19:30','20:00','20:30','21:00'];

      const selectedTimeSlots = Object.keys(selectedCellsEdit).map(key => parseInt(key)).sort((a, b) => a - b);
      const startTimeIndex = selectedTimeSlots[0] - 1;
      const endTimeIndex = selectedTimeSlots[selectedTimeSlots.length - 1] - 1;

      const startTime = timeSlots[startTimeIndex];
      const endTime = timeSlots[endTimeIndex];

      const selectedDate = new Date(dateSelect.value);
      const startDateTime = new Date(selectedDate);
      const endDateTime = new Date(selectedDate);

      const [startHour, startMinute] = startTime.split(':').map(num => parseInt(num));
      startDateTime.setHours(startHour, startMinute, 0, 0);

      const [endHour, endMinute] = endTime.split(':').map(num => parseInt(num));
      endDateTime.setHours(endHour, endMinute + 30, 0, 0);

      const firstSelectedCell = selectedCellsEdit[selectedTimeSlots[0]];

      const updatedReservation = {
        id: reservationData._id,
        seat: firstSelectedCell.seat,
        lab: selectedLab,
        resDate: {
          start: startDateTime,
          end: endDateTime
        },
        anon: originalReservation.anon // Preserve original anon setting
      };

      fetch(`/admin/edit/${reservationData._id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          reservation: updatedReservation
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.href = `/confirmation/${reservationData._id}`;
        } else {
          console.log('Error updating reservation: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        console.log('Error updating reservation. Please try again.');
      });
    }

    async function fetchReservationsEdit(lab, resDateStart) {
      try {
        const url = new URL('/api/reservations', window.location.origin);
        if (lab) url.searchParams.append('lab', lab);
        if (resDateStart) url.searchParams.append('resDateStart', resDateStart);
        
        const response = await fetch(url.toString(), {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        return data.reservations || data || [];
        
      } catch (error) {
        console.error('Error fetching reservations:', error);
        return [];
      }
    }

    function timeToSlotIndexEdit(timeString) {
      const date = new Date(timeString);
      
      // Get local time components
      const hours = date.getHours();
      const minutes = date.getMinutes();
      
      console.log(`Converting time: ${timeString} -> ${hours}:${minutes.toString().padStart(2, '0')}`);
      
      // 7:00 AM = slot 1, 7:30 AM = slot 2, etc.
      const baseHour = 7;
      
      // Calculate slot index: each hour has 2 slots (30-minute intervals)
      let slotIndex = ((hours - baseHour) * 2) + 1;
      
      // Add 1 more if minutes >= 30 (for the second half-hour slot)
      if (minutes >= 30) {
        slotIndex += 1;
      }
      
      console.log(`Calculated slot index: ${slotIndex}`);
      
      // Ensure slot index is within valid range (1-29)
      return Math.max(1, Math.min(29, slotIndex));
    }

    function getSeatRowNumberEdit(seatString) {
      // Extract row number from seat string (e.g., "A3" -> 3)
      const match = seatString.match(/[A-Z](\d+)/);
      return match ? parseInt(match[1]) : 1;
    }

    async function markReservationsEdit() {
      try {
        const dateInput = document.getElementById('date_select_edit').value;
        const currentLab = document.getElementById('selected-lab-edit').textContent;
        
        if (!dateInput || !currentLab) {
          console.log('Date or lab not selected, skipping reservation marking');
          return;
        }
        
        console.log('Fetching reservations for edit:', { lab: currentLab, date: dateInput });
        
        const reservations = await fetchReservationsEdit(currentLab, dateInput);
        
        // Clear all previous markings
        // Remove existing tooltip
        const existingTooltip = document.getElementById('reservation-tooltip');
        if (existingTooltip) {
          existingTooltip.remove();
        }

        const allCells = document.querySelectorAll('td[data-row]');
        if (allCells && allCells.length > 0) {
          allCells.forEach(cell => {
            cell.classList.remove('reserved', 'editable');
            cell.removeAttribute('data-reservation-info');
            const clone = cell.cloneNode(true);
            // Re-attach the click events since cloning doesn't copy them
            clone.addEventListener('click', function() { selectCellEdit(this); });
            clone.addEventListener("contextmenu", (event) => {
              event.preventDefault();
              deselectCellEdit(event.currentTarget);
            });
            cell.parentNode.replaceChild(clone, cell);
          });
        }
        
        if (!Array.isArray(reservations)) {
          console.error('Reservations is not an array:', reservations);
          return;
        }
        
        console.log('Found reservations for edit:', reservations.length);
        
        reservations.forEach(reservation => {
          const seatRowNumber = getSeatRowNumberEdit(reservation.seat);
          const startSlot = timeToSlotIndexEdit(reservation.resDate.start);
          const endSlot = timeToSlotIndexEdit(reservation.resDate.end) - 1;
          // Mark all slots from start to end
          for (let slot = startSlot; slot <= endSlot; slot++) {
            const cell = document.querySelector(`td[data-row="${seatRowNumber}"][data-col="${slot}"]`);
            if (cell) {
              cell.classList.add('reserved');
              // If this is the reservation being edited, also mark as editable
              if (reservation._id === editableReservationId || reservation.id === editableReservationId) {
                cell.classList.add('editable');
              }
              // Attach tooltip info
              cell.dataset.reservationInfo = JSON.stringify({
                seat: reservation.seat,
                lab: reservation.lab,
                reqDate: reservation.reqDate,
                resStart: reservation.resDate.start,
                resEnd: reservation.resDate.end,
                user: reservation.user,
                anon: reservation.anon,
                reservedStud: reservation.reservedStud
              });
              cell.addEventListener('mouseenter', showReservationTooltipEdit);
              cell.addEventListener('mouseleave', hideReservationTooltipEdit);
            }
          }
        });
        
        // Pre-select the current reservation's time slots
        await preSelectCurrentReservation();
        
      } catch (error) {
        console.error('Error marking reservations:', error);
      }
    }

    async function preSelectCurrentReservation() {
      // Pre-select the current reservation's cells
      const currentReservationSeat = originalReservation.seat;
      const currentSeatRowNumber = getSeatRowNumberEdit(currentReservationSeat);
      const currentStartSlot = timeToSlotIndexEdit(originalReservation.resDate.start);
      const currentEndSlot = timeToSlotIndexEdit(originalReservation.resDate.end);
      
      // Only pre-select if the date matches the original reservation date
      const dateInput = document.getElementById('date_select_edit').value;
      const originalDate = new Date(originalReservation.resDate.start).toISOString().split('T')[0];
      
      if (dateInput === originalDate) {
        currentActiveRowEdit = currentSeatRowNumber;
        
        for (let slot = currentStartSlot; slot <= currentEndSlot; slot++) {
          const cell = document.querySelector(`td[data-row="${currentSeatRowNumber}"][data-col="${slot}"]`);
          if (cell) {
            cell.classList.add('selected');
            selectedCellsEdit[slot] = {
              seat: currentReservationSeat,
              timeSlot: slot
            };
          }
        }
        
        checkSubmitButtonEdit();
      }
    }

    function setupReservationRefreshEdit() {
      const dateSelect = document.getElementById('date_select_edit');
      
      dateSelect.addEventListener('change', async function() {
        updateDateHeaderEdit();
        clearAllSelectionsEdit();
        await markReservationsEdit();
      });
    }

    // Initialize the form with reservation data
    document.addEventListener('DOMContentLoaded', async function() {
      // Set the date from the original reservation
      if (originalReservation && originalReservation.resDate && originalReservation.resDate.start) {
        const resDate = new Date(originalReservation.resDate.start);
        document.getElementById('date_select_edit').value = resDate.toISOString().split('T')[0];
      } else {
        // Fallback to today's date
        const today = new Date();
        document.getElementById('date_select_edit').value = today.toISOString().split('T')[0];
      }
      
      // Set minimum date to today
      const today = new Date();
      document.getElementById('date_select_edit').min = today.toISOString().split('T')[0];
      
      createTableRowsEdit();
      updateDateHeaderEdit();
      checkSubmitButtonEdit();
      
      // Set up reservation refresh and mark initial reservations
      setupReservationRefreshEdit();
      await markReservationsEdit();
    });