mixin step1()
  .step.active#step1.content-box.text-center.p-4
    h1 Reserve Laboratory Table
    p.mb-4
      | Ready to book your lab seat? Just fill out the form with your needed laboratory.
      br
      | You'll get a confirmation as soon as your reservation is secured.
    .mb-4.d-flex.justify-content-center.gap-3.flex-wrap
      label(for="lab_select")
      select#lab_select.form-select.w-auto(name="lab" required onchange="checkNextButton()")
        option(value="") ðŸ”¬ Select Laboratory
        option(value="GK101A") GK101A
        option(value="GK304A") GK304A
        option(value="GK304B") GK304B
        option(value="AG702") AG702
        option(value="AG1904") AG1904
        option(value="LS209") LS209
        option(value="LS311") LS311
    // Removed anonymous reservation checkbox
    button#next-btn.main-btn.mt-3(type="button" onclick="nextStep()" disabled) Show Availability

mixin step2(timeSlots)
  .reservation-container#reservationForm
    // Expose user object to client-side JS
    if typeof user !== 'undefined'
      script.
        window.user = !#{JSON.stringify(user)} ? null : !function(){ try { return JSON.parse('#{JSON.stringify(user)}'); } catch(e) { return null; } }();
    .step#step2.content-box.text-center.p-4
      h1 Reserve Laboratory Table
      .selection-info
        strong Selected Laboratory:
        span#selected-lab
      .date-header#date-header
        span#formatted-date
      .date-input-container
        label(for="date_select")
        input#date_select.form-control.w-auto(type="date" name="resDate" required onchange="updateDateHeader(); checkSubmitButton();")
      .d-flex.justify-content-center
        .step2-container
          .step2-content
            table.time-table#time-table
              thead
                tr
                  th Seat
                  each timeSlot in timeSlots
                    th= timeSlot
              tbody#table-body
      // Message for unauthenticated users with selected cells
      .login-required-header#login-required-header(style="display:none; margin-top: 1rem;")
        span(style="background: #FAEECF; color: #11414E; padding: 8px 16px; border-radius: 8px; border: 0px solid #11414E; font-size: 1.1rem;")
          | Please log in to submit a reservation.
      .mt-3
        button.btn.btn-back(type="button" onclick="prevStep()") Back
        button#submit-btn.btn.submit(type="button" onclick="submitForm()" disabled=!(typeof user !== 'undefined' && user && user.userId)) Submit
mixin scriptBlock()
  script.
    let selectedCells = [];
    let currentActiveRow = null;
    
    function formatDate(dateString) {
      const date = new Date(dateString);
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const months = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];

      const dayOfWeek = days[date.getDay()];
      const month = months[date.getMonth()];
      const day = date.getDate();
      const year = date.getFullYear();

      return `${dayOfWeek}, ${month} ${day}, ${year}`;
    }

    function updateDateHeader() {
      const dateSelect = document.getElementById('date_select');
      const dateHeader = document.getElementById('date-header');
      const formattedDateSpan = document.getElementById('formatted-date');

      if (dateSelect.value) {
        const formattedDate = formatDate(dateSelect.value);
        formattedDateSpan.textContent = formattedDate;
        dateHeader.classList.add('visible');
      } else {
        dateHeader.classList.remove('visible');
      }
    }

    function checkNextButton() {
      const labSelect = document.getElementById('lab_select');
      const nextBtn = document.getElementById('next-btn');
      nextBtn.disabled = !labSelect.value;
    }

    function checkSubmitButton() {
      const submitBtn = document.getElementById('submit-btn');
      const dateSelect = document.getElementById('date_select');
      const loginRequiredHeader = document.getElementById('login-required-header');
      // Use the correct logic for user and user.userId
      let userObj = (typeof window !== 'undefined' && window.user) ? window.user : (typeof user !== 'undefined' ? user : undefined);
      let userExists = userObj && userObj.userId;
      const hasSelection = dateSelect.value && Object.keys(selectedCells).length > 0;
      //submitBtn.disabled = !(false);
      // Show login required message if cells are selected but not logged in
      if (hasSelection && !userExists) {
        loginRequiredHeader.style.display = 'block';
      } else {
        loginRequiredHeader.style.display = 'none';
      }
    }

    function createTableRows() {
      const tableBody = document.getElementById('table-body');
      tableBody.innerHTML = '';

      for (let i = 1; i <= 8; i++) {
        const row = document.createElement('tr');
        const rowLabel = document.createElement('td');
        rowLabel.textContent = `A${i}`;
        row.appendChild(rowLabel);

        for (let j = 1; j <= 29; j++) {
          const cell = document.createElement('td');
          cell.dataset.row = i;
          cell.dataset.col = j;
          cell.dataset.seat = `A${i}`;
          cell.addEventListener('click', function() { selectCell(this); });
          cell.addEventListener("contextmenu", (event) => {
            event.preventDefault();
            deselectCell(event.currentTarget);
          });
          row.appendChild(cell);
        }
        tableBody.appendChild(row);
      }
    }

    function clearAllSelections() {
      const allSelectedCells = document.querySelectorAll('.selected');
      allSelectedCells.forEach(cell => {
        cell.classList.remove('selected');
      });
      selectedCells = [];
      currentActiveRow = null;
    }

      function selectCell(clickedCell) {
      const row = parseInt(clickedCell.dataset.row);
      const col = parseInt(clickedCell.dataset.col);
      const seat = clickedCell.dataset.seat;

      if (currentActiveRow !== null && currentActiveRow !== row) {
        clearAllSelections();
      }

      currentActiveRow = row;
      const isAlreadySelected = clickedCell.classList.contains('selected');
      const isReserved = clickedCell.classList.contains('reserved');

      // If clicking on a reserved cell, don't allow selection
      if (isReserved) {
        return;
      }

      if (isAlreadySelected) {
        const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
        let foundClickedCell = false;

        rowCells.forEach(cell => {
          const cellCol = parseInt(cell.dataset.col);
          if (cellCol === col) {
            foundClickedCell = true;
          }
          if (foundClickedCell) {
            cell.classList.remove('selected');
            delete selectedCells[cellCol];
          }
        });
      } else {
        const currentSelectedCols = Object.keys(selectedCells).map(key => parseInt(key)).sort((a, b) => a - b);

        if (currentSelectedCols.length == 0) {
          clickedCell.classList.add('selected');
          selectedCells[col] = {
            seat: seat,
            timeSlot: col
          };
        } else {
          const minCol = Math.min(...currentSelectedCols, col);
          const maxCol = Math.max(...currentSelectedCols, col);

          // Check if there are any reserved cells in the range
          let hasReservedInRange = false;
          for (let i = minCol; i <= maxCol; i++) {
            const cellToCheck = document.querySelector(`td[data-row="${row}"][data-col="${i}"]`);
            if (cellToCheck && cellToCheck.classList.contains('reserved')) {
              hasReservedInRange = true;
              break;
            }
          }

          // If there are reserved cells in the range, don't allow selection
          if (hasReservedInRange) {
            // Optionally, you can show an alert or visual feedback
            console.log('Cannot select range: reserved cells detected in the range');
            return;
          }

          // Clear current selections and select the new range
          const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
          rowCells.forEach(cell => {
            cell.classList.remove('selected');
          });
          selectedCells = {};

          // Select the new range
          for (let i = minCol; i <= maxCol; i++) {
            const cellToSelect = document.querySelector(`td[data-row="${row}"][data-col="${i}"]`);
            if (cellToSelect) {
              cellToSelect.classList.add('selected');
              selectedCells[i] = {
                seat: seat,
                timeSlot: i
              };
            }
          }
        }
      }
      checkSubmitButton();
    }

    function deselectCell(clickedCell) {
      const row = parseInt(clickedCell.dataset.row);
      const col = parseInt(clickedCell.dataset.col);

      if (currentActiveRow !== row) {
        return;
      }

      const rowCells = document.querySelectorAll(`td[data-row="${row}"]`);
      const isSelected = clickedCell.classList.contains('selected');
      if (isSelected) {
        let foundClickedCell = false;

        rowCells.forEach(cell => {
          const cellCol = parseInt(cell.dataset.col);
          if (cellCol === col) {
            foundClickedCell = true;
          }
          if (foundClickedCell) {
            cell.classList.remove('selected');
            delete selectedCells[cellCol];
          }
        });

        if (Object.keys(selectedCells).length === 0) {
          currentActiveRow = null;
        }
      }

      checkSubmitButton();
    }

    function nextStep() {
      const labSelect = document.getElementById('lab_select');

      if (labSelect.value) {
        const selectedLab = labSelect.value;
        document.getElementById('selected-lab').textContent = selectedLab;
        document.getElementById('step1').classList.remove('active');
        document.getElementById('step2').classList.add('active');
        updateDateHeader();
        clearAllSelections();
        checkSubmitButton();
      }
    }

    function prevStep() {
      document.getElementById('step2').classList.remove('active');
      document.getElementById('step1').classList.add('active');
      clearAllSelections();
    }
    
    function submitForm() {

      const labSelect = document.getElementById('lab_select');
      const dateSelect = document.getElementById('date_select');

      function timeToSlotIndex(timeString) {
        const date = new Date(timeString);
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const baseHour = 7;
        let slotIndex = ((hours - baseHour) * 2) + 1;
        if (minutes >= 30) {
          slotIndex += 1;
        }
        return Math.max(1, Math.min(29, slotIndex));
      }

      function getSeatRowNumber(seatString) {
        const match = seatString.match(/[A-Z](\d+)/);
        return match ? parseInt(match[1]) : 1;
      }

      const timeSlots = ['07:00','07:30','08:00','08:30','09:00','09:30','10:00','10:30','11:00','11:30','12:00','12:30','13:00','13:30','14:00','14:30','15:00','15:30','16:00','16:30','17:00','17:30','18:00','18:30','19:00','19:30','20:00','20:30','21:00'];

      const selectedTimeSlots = Object.keys(selectedCells).map(key => parseInt(key)).sort((a, b) => a - b);
      const startTimeIndex = selectedTimeSlots[0] - 1;
      const endTimeIndex = selectedTimeSlots[selectedTimeSlots.length - 1] - 1;

      const startTime = timeSlots[startTimeIndex];
      const endTime = timeSlots[endTimeIndex];

      const selectedDate = new Date(dateSelect.value);
      const startDateTime = new Date(selectedDate);
      const endDateTime = new Date(selectedDate);

      const [startHour, startMinute] = startTime.split(':').map(num => parseInt(num));
      startDateTime.setHours(startHour, startMinute, 0, 0);

      const [endHour, endMinute] = endTime.split(':').map(num => parseInt(num));
      endDateTime.setHours(endHour, endMinute + 30, 0, 0);

      const firstSelectedCell = selectedCells[selectedTimeSlots[0]];


      // Attach logged-in user to reservation if available
      let reservationUser = undefined;
      let reservationFullName = undefined;
      let userObj = (typeof window !== 'undefined' && window.user) ? window.user : (typeof user !== 'undefined' ? user : undefined);
      if (userObj && userObj.userId) {
        reservationUser = userObj.userId;
        reservationFullName = (userObj.firstName ? userObj.firstName : '') + (userObj.lastName ? ' ' + userObj.lastName : '');
      }

      const reservation = {
        seat: firstSelectedCell.seat,
        lab: labSelect.value,
        reqDate: new Date(),
        resDate: {
          start: startDateTime,
          end: endDateTime
        },
        user: reservationUser,
        fullName: reservationFullName
      };

      fetch('/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            reservation: reservation
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            window.location.href = `/confirmation/${data.bookingId}`;
          } else {
            alert('Error submitting reservation: ' + (data.error || 'Unknown error'));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error submitting reservation. Please try again.');
        });
    }
    
    
    // Fixed fetchReservations function - should be async if fetching from server
    async function fetchReservations(lab, resDateStart) {
      try {
        // Create URL with query parameters
        const url = new URL('/api/reservations', window.location.origin);
        if (lab) url.searchParams.append('lab', lab);
        if (resDateStart) url.searchParams.append('resDateStart', resDateStart);
        
        const response = await fetch(url.toString(), {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        return data.reservations || data || [];
        
      } catch (error) {
        console.error('Error fetching reservations:', error);
      }
    };

    // Fixed timeToSlotIndex function - handles UTC conversion properly
    function timeToSlotIndex(timeString) {
      const date = new Date(timeString);
      
      // Get local time components
      const hours = date.getHours();
      const minutes = date.getMinutes();
      
      console.log(`Converting time: ${timeString} -> ${hours}:${minutes.toString().padStart(2, '0')}`);
      
      // 7:00 AM = slot 1, 7:30 AM = slot 2, etc.
      const baseHour = 7;
      
      // Calculate slot index: each hour has 2 slots (30-minute intervals)
      let slotIndex = ((hours - baseHour) * 2) + 1;
      
      // Add 1 more if minutes >= 30 (for the second half-hour slot)
      if (minutes >= 30) {
        slotIndex += 1;
      }
      
      console.log(`Calculated slot index: ${slotIndex}`);
      
      // Ensure slot index is within valid range (1-29)
      return Math.max(1, Math.min(29, slotIndex));
    }

    // Fixed getSeatRowNumber function
    function getSeatRowNumber(seatString) {
      // Extract row number from seat string (e.g., "A3" -> 3)
      const match = seatString.match(/[A-Z](\d+)/);
      return match ? parseInt(match[1]) : 1;
    }

    // Updated DOMContentLoaded event listener
    document.addEventListener('DOMContentLoaded', async function() {
      const today = new Date();
      const formattedDate = today.toISOString().split('T')[0];
      document.getElementById('date_select').value = formattedDate;
      document.getElementById('date_select').min = formattedDate;
      createTableRows();
      checkNextButton();
      updateDateHeader();
      
      // Mark reservations after table is created
      await markReservations();
    });

    // Add event listeners to refresh reservations when date or lab changes
    function setupReservationRefresh() {
      const dateSelect = document.getElementById('date_select');
      const labSelect = document.getElementById('lab_select');
      
      dateSelect.addEventListener('change', async function() {
        updateDateHeader();
        await markReservations();
      });
      
      labSelect.addEventListener('change', async function() {
        await markReservations();
      });
    }

    // Call this in your nextStep function to set up event listeners
    function nextStep() {
      const labSelect = document.getElementById('lab_select');

      if (labSelect.value) {
        const selectedLab = labSelect.value;
        document.getElementById('selected-lab').textContent = selectedLab;
        document.getElementById('step1').classList.remove('active');
        document.getElementById('step2').classList.add('active');
        updateDateHeader();
        clearAllSelections();
        checkSubmitButton();
        
        // Set up reservation refresh and mark initial reservations
        setupReservationRefresh();
        markReservations();
      }
    }
    function checkSubmitButtonEdit() {
      const submitBtn = document.getElementById('submit-btn-edit');
      const dateSelect = document.getElementById('date_select_edit');
      submitBtn.disabled = !(dateSelect.value && Object.keys(selectedCellsEdit).length > 1);
    }
    // Fixed markReservations function - now async and filters by current date/lab
      async function markReservations() {
        try {
          const dateInput = document.getElementById('date_select').value;
          const currentLab = document.getElementById('lab_select').value;
          
          if (!dateInput || !currentLab) {
            console.log('Date or lab not selected, skipping reservation marking');
            return;
          }
          
          console.log('Fetching reservations for:', { lab: currentLab, date: dateInput });
          
          // Pass the date string directly - let the backend handle the UTC+8 conversion
          const reservations = await fetchReservations(currentLab, dateInput);
          
          // Clear all previous reservations
          const allCells = document.querySelectorAll('td[data-row]');
          if (allCells && allCells.length > 0) {
            allCells.forEach(cell => {
              cell.classList.remove('reserved');
            });
          }
          
          // Ensure reservations is an array
          if (!Array.isArray(reservations)) {
            console.error('Reservations is not an array:', reservations);
            return;
          }
          
          console.log('Found reservations:', reservations.length);
          
          reservations.forEach(reservation => {
            const seatRowNumber = getSeatRowNumber(reservation.seat);
            const startSlot = timeToSlotIndex(reservation.resDate.start);
            const endSlot = timeToSlotIndex(reservation.resDate.end) - 1;
            // Info for tooltip
            const info = {
              seat: reservation.seat,
              lab: reservation.lab,
              reqDate: reservation.reqDate,
              resStart: reservation.resDate.start,
              resEnd: reservation.resDate.end,
              anon: reservation.anon,
              user: reservation.user && reservation.user.username ? reservation.user.username : 'N/A',
              reservedStud: reservation.reservedStud
            };
            for (let slot = startSlot; slot <= endSlot; slot++) {
              const cell = document.querySelector(`td[data-row="${seatRowNumber}"][data-col="${slot}"]`);
              if (cell) {
                cell.classList.add('reserved');
                // Attach reservation info as data attributes
                cell.dataset.reservationInfo = JSON.stringify(info);
                // Add hover listeners if not already present
                if (!cell.dataset.tooltipBound) {
                  cell.addEventListener('mouseenter', showReservationTooltip);
                  cell.addEventListener('mouseleave', hideReservationTooltip);
                  cell.dataset.tooltipBound = 'true';
                }
              }
            }
          });
    // Tooltip functions
    function showReservationTooltip(e) {
      let info = {};
      try {
        info = JSON.parse(e.currentTarget.dataset.reservationInfo);
      } catch {}
      let tooltip = document.getElementById('reservation-tooltip');
      if (!tooltip) {
        tooltip = document.createElement('div');
        tooltip.id = 'reservation-tooltip';
        tooltip.style.position = 'fixed';
        tooltip.style.zIndex = 9999;
        tooltip.style.pointerEvents = 'none';
        tooltip.style.background = '#FAEECF';
        tooltip.style.border = '1px solid #11414E';
        tooltip.style.color = '#11414E';
        tooltip.style.padding = '10px 16px';
        tooltip.style.borderRadius = '8px';
        tooltip.style.boxShadow = '0 2px 8px rgba(0,0,0,0.12)';
        tooltip.style.fontSize = '15px';
        document.body.appendChild(tooltip);
      }
      tooltip.innerHTML =
        `<strong>Seat:</strong> ${info.seat || ''}<br>` +
        `<strong>Lab:</strong> ${info.lab || ''}<br>` +
        `<strong>Request Date:</strong> ${info.reqDate ? new Date(info.reqDate).toLocaleString() : ''}<br>` +
        `<strong>Reservation:</strong> ${info.resStart ? new Date(info.resStart).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : ''} - ${info.resEnd ? new Date(info.resEnd).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : ''}<br>` +
        `<strong>User:</strong> ${info.anon ? 'Anonymous' : (info.user || 'N/A')}<br>` +
        (info.reservedStud ? `<strong>Students:</strong> ${info.reservedStud}<br>` : '');
      // Position tooltip near mouse
      function moveTooltip(ev) {
        tooltip.style.left = (ev.clientX + 16) + 'px';
        tooltip.style.top = (ev.clientY + 16) + 'px';
      }
      moveTooltip(e);
      document.addEventListener('mousemove', moveTooltip);
      e.currentTarget._moveTooltip = moveTooltip;
    }
    function hideReservationTooltip(e) {
      const tooltip = document.getElementById('reservation-tooltip');
      if (tooltip) tooltip.remove();
      if (e.currentTarget._moveTooltip) {
        document.removeEventListener('mousemove', e.currentTarget._moveTooltip);
        delete e.currentTarget._moveTooltip;
      }
    }
        } catch (error) {
          console.error('Error marking reservations:', error);
        }
      }

    // Also fix the edit version
    async function markReservationsEdit() {
      try {
        const dateInput = document.getElementById('date_select_edit').value;
        const currentLab = document.getElementById('selected-lab-edit').textContent;
        
        if (!dateInput || !currentLab) {
          console.log('Date or lab not selected, skipping reservation marking');
          return;
        }
        
        console.log('Fetching reservations for edit:', { lab: currentLab, date: dateInput });
        
        // Pass the date string directly - let the backend handle the UTC+8 conversion
        const reservations = await fetchReservationsEdit(currentLab, dateInput);
        
        // Clear all previous markings
        const allCells = document.querySelectorAll('td[data-row]');
        if (allCells && allCells.length > 0) {
          allCells.forEach(cell => {
            cell.classList.remove('reserved', 'editable');
          });
        }
        
        if (!Array.isArray(reservations)) {
          console.error('Reservations is not an array:', reservations);
          return;
        }
        
        console.log('Found reservations for edit:', reservations.length);
        
        reservations.forEach(reservation => {
          const seatRowNumber = getSeatRowNumberEdit(reservation.seat);
          const startSlot = timeToSlotIndexEdit(reservation.resDate.start);
          const endSlot = timeToSlotIndexEdit(reservation.resDate.end);
          
          // Mark all slots from start to end
          for (let slot = startSlot; slot <= endSlot; slot++) {
            const cell = document.querySelector(`td[data-row="${seatRowNumber}"][data-col="${slot}"]`);
            if (cell) {
              cell.classList.add('reserved');
              
            }
          }
        });
      } catch (error) {
        console.error('Error marking reservations:', error);
      }
    }